# This is a manually backported patch from the below commit
# The commit below fixes both issues 2575 and 4011
# The current patch is modified version of the commit to fix only the issue 2575 (CVE-2023-2976)
# since issue 4011 (CVE-2020-8908) is already fixed in the spec with a patch
#
# From feb83a1c8fd2e7670b244d5afd23cba5aca43284 Mon Sep 17 00:00:00 2001
# From: cpovirk <cpovirk@google.com>
# Date: Thu, 25 May 2023 13:18:00 -0700
# Subject: [PATCH] Restrict permissions when creating temporary files and
#  directories, or fail if that's not possible.
#
# (Also, check that the provided `fileThreshold` is non-negative.)
#
# - Fixes https://github.com/google/guava/issues/2575
# - Fixes https://github.com/google/guava/issues/4011
#
# RELNOTES=Reimplemented `Files.createTempDir` and `FileBackedOutputStream` to further address [CVE-2020-8908](https://github.com/google/guava/issues/4011) and [Guava issue #2575](https://github.com/google/guava/issues/2575) (CVE forthcoming).
# PiperOrigin-RevId: 535359233
# 
# J2ktIncompatible.java extracted from https://github.com/google/guava/commit/ae97cce255a24e82db9a5acfc07e3ec787e1c9c3
# ElementTypesAreNonnullByDefault.java extracted from https://github.com/google/guava/commit/5137f9983a0f2dee131b5e090228aedd2b7ace44
#
From 9b9d984002fefab3a692b8e522edad20872b6be7 Mon Sep 17 00:00:00 2001
From: Sindhu Karri <lakarri@microsoft.com>
Date: Thu, 20 Jun 2024 01:03:10 +0000
Subject: [PATCH] Restrict permissions when creating temporary files and directories, or fail if that's not possible.
 (Also, check that the provided `fileThreshold` is non-negative.)

import Preconditions.checkArgument

include ElementTypesAreNonnullByDefault.java annotation
---
 .../common/annotations/J2ktIncompatible.java  |  31 +++
 .../io/ElementTypesAreNonnullByDefault.java   |  41 ++++
 .../common/io/FileBackedOutputStream.java     |   7 +-
 android/pom.xml                               |   1 +
 .../common/annotations/J2ktIncompatible.java  |  31 +++
 .../io/ElementTypesAreNonnullByDefault.java   |  41 ++++
 .../common/io/FileBackedOutputStream.java     |   7 +-
 .../com/google/common/io/TempFileCreator.java | 176 ++++++++++++++++++
 pom.xml                                       |   1 +
 9 files changed, 334 insertions(+), 2 deletions(-)
 create mode 100644 android/guava/src/com/google/common/annotations/J2ktIncompatible.java
 create mode 100644 android/guava/src/com/google/common/io/ElementTypesAreNonnullByDefault.java
 create mode 100644 guava/src/com/google/common/annotations/J2ktIncompatible.java
 create mode 100644 guava/src/com/google/common/io/ElementTypesAreNonnullByDefault.java
 create mode 100644 guava/src/com/google/common/io/TempFileCreator.java

diff --git a/android/guava/src/com/google/common/annotations/J2ktIncompatible.java b/android/guava/src/com/google/common/annotations/J2ktIncompatible.java
new file mode 100644
index 0000000..6e28d02
--- /dev/null
+++ b/android/guava/src/com/google/common/annotations/J2ktIncompatible.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2009 The Guava Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.google.common.annotations;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * The presence of this annotation on an API indicates that the method may <em>not</em> be used with
+ * J2kt.
+ *
+ * @since NEXT
+ */
+@Retention(RetentionPolicy.CLASS)
+@Target({ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR, ElementType.FIELD})
+@GwtCompatible
+public @interface J2ktIncompatible {}
diff --git a/android/guava/src/com/google/common/io/ElementTypesAreNonnullByDefault.java b/android/guava/src/com/google/common/io/ElementTypesAreNonnullByDefault.java
new file mode 100644
index 0000000..48bc10f
--- /dev/null
+++ b/android/guava/src/com/google/common/io/ElementTypesAreNonnullByDefault.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2021 The Guava Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.common.io;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.ElementType.TYPE;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+import com.google.common.annotations.GwtCompatible;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+import javax.annotation.Nonnull;
+import javax.annotation.meta.TypeQualifierDefault;
+
+/**
+ * Marks all "top-level" types as non-null in a way that is recognized by Kotlin. Note that this
+ * unfortunately includes type-variable usages, so we also provide {@link ParametricNullness} to
+ * "undo" it as best we can.
+ */
+@GwtCompatible
+@Retention(RUNTIME)
+@Target(TYPE)
+@TypeQualifierDefault({FIELD, METHOD, PARAMETER})
+@Nonnull
+@interface ElementTypesAreNonnullByDefault {}
diff --git a/android/guava/src/com/google/common/io/FileBackedOutputStream.java b/android/guava/src/com/google/common/io/FileBackedOutputStream.java
index e303110..56a33f5 100644
--- a/android/guava/src/com/google/common/io/FileBackedOutputStream.java
+++ b/android/guava/src/com/google/common/io/FileBackedOutputStream.java
@@ -14,6 +14,8 @@
 
 package com.google.common.io;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
 import com.google.common.annotations.Beta;
 import com.google.common.annotations.GwtIncompatible;
 import com.google.common.annotations.VisibleForTesting;
@@ -82,8 +84,11 @@ public final class FileBackedOutputStream extends OutputStream {
    * @param fileThreshold the number of bytes before the stream should switch to buffering to a file
    * @param resetOnFinalize if true, the {@link #reset} method will be called when the {@link
    *     ByteSource} returned by {@link #asByteSource} is finalized
+   * @throws IllegalArgumentException if {@code fileThreshold} is negative
    */
   public FileBackedOutputStream(int fileThreshold, boolean resetOnFinalize) {
+    checkArgument(
+        fileThreshold >= 0, "fileThreshold must be non-negative, but was %s", fileThreshold);
     this.fileThreshold = fileThreshold;
     this.resetOnFinalize = resetOnFinalize;
     memory = new MemoryOutput();
@@ -193,7 +198,7 @@ public final class FileBackedOutputStream extends OutputStream {
    */
   private void update(int len) throws IOException {
     if (file == null && (memory.getCount() + len > fileThreshold)) {
-      File temp = File.createTempFile("FileBackedOutputStream", null);
+      File temp = TempFileCreator.INSTANCE.createTempFile("FileBackedOutputStream");
       if (resetOnFinalize) {
         // Finalizers are not guaranteed to be called on system shutdown;
         // this is insurance.
diff --git a/android/pom.xml b/android/pom.xml
index e51a8e0..c19e531 100644
--- a/android/pom.xml
+++ b/android/pom.xml
@@ -131,6 +131,7 @@
           <artifactId>animal-sniffer-maven-plugin</artifactId>
           <version>${animal.sniffer.version}</version>
           <configuration>
+            <annotations>com.google.common.io.IgnoreJRERequirement</annotations>
             <signature>
               <groupId>org.codehaus.mojo.signature</groupId>
               <artifactId>java16-sun</artifactId>
diff --git a/guava/src/com/google/common/annotations/J2ktIncompatible.java b/guava/src/com/google/common/annotations/J2ktIncompatible.java
new file mode 100644
index 0000000..6e28d02
--- /dev/null
+++ b/guava/src/com/google/common/annotations/J2ktIncompatible.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2009 The Guava Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.google.common.annotations;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * The presence of this annotation on an API indicates that the method may <em>not</em> be used with
+ * J2kt.
+ *
+ * @since NEXT
+ */
+@Retention(RetentionPolicy.CLASS)
+@Target({ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR, ElementType.FIELD})
+@GwtCompatible
+public @interface J2ktIncompatible {}
diff --git a/guava/src/com/google/common/io/ElementTypesAreNonnullByDefault.java b/guava/src/com/google/common/io/ElementTypesAreNonnullByDefault.java
new file mode 100644
index 0000000..48bc10f
--- /dev/null
+++ b/guava/src/com/google/common/io/ElementTypesAreNonnullByDefault.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2021 The Guava Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.common.io;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.ElementType.TYPE;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+import com.google.common.annotations.GwtCompatible;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+import javax.annotation.Nonnull;
+import javax.annotation.meta.TypeQualifierDefault;
+
+/**
+ * Marks all "top-level" types as non-null in a way that is recognized by Kotlin. Note that this
+ * unfortunately includes type-variable usages, so we also provide {@link ParametricNullness} to
+ * "undo" it as best we can.
+ */
+@GwtCompatible
+@Retention(RUNTIME)
+@Target(TYPE)
+@TypeQualifierDefault({FIELD, METHOD, PARAMETER})
+@Nonnull
+@interface ElementTypesAreNonnullByDefault {}
diff --git a/guava/src/com/google/common/io/FileBackedOutputStream.java b/guava/src/com/google/common/io/FileBackedOutputStream.java
index e303110..56a33f5 100644
--- a/guava/src/com/google/common/io/FileBackedOutputStream.java
+++ b/guava/src/com/google/common/io/FileBackedOutputStream.java
@@ -14,6 +14,8 @@
 
 package com.google.common.io;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
 import com.google.common.annotations.Beta;
 import com.google.common.annotations.GwtIncompatible;
 import com.google.common.annotations.VisibleForTesting;
@@ -82,8 +84,11 @@ public final class FileBackedOutputStream extends OutputStream {
    * @param fileThreshold the number of bytes before the stream should switch to buffering to a file
    * @param resetOnFinalize if true, the {@link #reset} method will be called when the {@link
    *     ByteSource} returned by {@link #asByteSource} is finalized
+   * @throws IllegalArgumentException if {@code fileThreshold} is negative
    */
   public FileBackedOutputStream(int fileThreshold, boolean resetOnFinalize) {
+    checkArgument(
+        fileThreshold >= 0, "fileThreshold must be non-negative, but was %s", fileThreshold);
     this.fileThreshold = fileThreshold;
     this.resetOnFinalize = resetOnFinalize;
     memory = new MemoryOutput();
@@ -193,7 +198,7 @@ public final class FileBackedOutputStream extends OutputStream {
    */
   private void update(int len) throws IOException {
     if (file == null && (memory.getCount() + len > fileThreshold)) {
-      File temp = File.createTempFile("FileBackedOutputStream", null);
+      File temp = TempFileCreator.INSTANCE.createTempFile("FileBackedOutputStream");
       if (resetOnFinalize) {
         // Finalizers are not guaranteed to be called on system shutdown;
         // this is insurance.
diff --git a/guava/src/com/google/common/io/TempFileCreator.java b/guava/src/com/google/common/io/TempFileCreator.java
new file mode 100644
index 0000000..a28a0af
--- /dev/null
+++ b/guava/src/com/google/common/io/TempFileCreator.java
@@ -0,0 +1,176 @@
+/*
+ * Copyright (C) 2007 The Guava Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.google.common.io;
+
+import static com.google.common.base.StandardSystemProperty.JAVA_IO_TMPDIR;
+
+import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
+import com.google.j2objc.annotations.J2ObjCIncompatible;
+import java.io.File;
+import java.io.IOException;
+import java.nio.file.Paths;
+import java.nio.file.attribute.FileAttribute;
+import java.nio.file.attribute.PosixFilePermission;
+import java.nio.file.attribute.PosixFilePermissions;
+import java.util.Set;
+
+/**
+ * Creates temporary files and directories whose permissions are restricted to the current user or,
+ * in the case of Android, the current app. If that is not possible (as is the case under the very
+ * old Android Ice Cream Sandwich release), then this class throws an exception instead of creating
+ * a file or directory that would be more accessible.
+ */
+@J2ktIncompatible
+@GwtIncompatible
+@J2ObjCIncompatible
+@ElementTypesAreNonnullByDefault
+abstract class TempFileCreator {
+  static final TempFileCreator INSTANCE = pickSecureCreator();
+
+  /**
+   * @throws IllegalStateException if the directory could not be created (to implement the contract
+   *     of {@link Files#createTempDir()}
+   * @throws UnsupportedOperationException if the system does not support creating temporary
+   *     directories securely
+   */
+  abstract File createTempDir();
+
+  abstract File createTempFile(String prefix) throws IOException;
+
+  private static TempFileCreator pickSecureCreator() {
+    try {
+      Class.forName("java.nio.file.Path");
+      return new JavaNioCreator();
+    } catch (ClassNotFoundException runningUnderAndroid) {
+      // Try another way.
+    }
+
+    try {
+      int version = (int) Class.forName("android.os.Build$VERSION").getField("SDK_INT").get(null);
+      int jellyBean =
+          (int) Class.forName("android.os.Build$VERSION_CODES").getField("JELLY_BEAN").get(null);
+      /*
+       * I assume that this check can't fail because JELLY_BEAN will be present only if we're
+       * running under Jelly Bean or higher. But it seems safest to check.
+       */
+      if (version < jellyBean) {
+        return new ThrowingCreator();
+      }
+
+      // Don't merge these catch() blocks, let alone use ReflectiveOperationException directly:
+      // b/65343391
+    } catch (NoSuchFieldException e) {
+      // The JELLY_BEAN field doesn't exist because we're running on a version before Jelly Bean :)
+      return new ThrowingCreator();
+    } catch (ClassNotFoundException e) {
+      // Should be impossible, but we want to return *something* so that class init succeeds.
+      return new ThrowingCreator();
+    } catch (IllegalAccessException e) {
+      // ditto
+      return new ThrowingCreator();
+    }
+
+    // Android isolates apps' temporary directories since Jelly Bean:
+    // https://github.com/google/guava/issues/4011#issuecomment-770020802
+    // So we can create files there with any permissions and still get security from the isolation.
+    return new JavaIoCreator();
+  }
+
+  @IgnoreJRERequirement // used only when Path is available
+  private static final class JavaNioCreator extends TempFileCreator {
+    private static final FileAttribute<Set<PosixFilePermission>> RWX_USER_ONLY =
+        PosixFilePermissions.asFileAttribute(PosixFilePermissions.fromString("rwx------"));
+    private static final FileAttribute<Set<PosixFilePermission>> RW_USER_ONLY =
+        PosixFilePermissions.asFileAttribute(PosixFilePermissions.fromString("rw-------"));
+
+    @Override
+    File createTempDir() {
+      try {
+        return java.nio.file.Files.createTempDirectory(
+                Paths.get(JAVA_IO_TMPDIR.value()), /* prefix= */ null, RWX_USER_ONLY)
+            .toFile();
+      } catch (IOException e) {
+        throw new IllegalStateException("Failed to create directory", e);
+      }
+    }
+
+    @Override
+    File createTempFile(String prefix) throws IOException {
+      return java.nio.file.Files.createTempFile(
+              Paths.get(JAVA_IO_TMPDIR.value()),
+              /* prefix= */ prefix,
+              /* suffix= */ null,
+              RW_USER_ONLY)
+          .toFile();
+    }
+  }
+
+  private static final class JavaIoCreator extends TempFileCreator {
+    @Override
+    File createTempDir() {
+      File baseDir = new File(JAVA_IO_TMPDIR.value());
+      @SuppressWarnings("GoodTime") // reading system time without TimeSource
+      String baseName = System.currentTimeMillis() + "-";
+
+      for (int counter = 0; counter < TEMP_DIR_ATTEMPTS; counter++) {
+        File tempDir = new File(baseDir, baseName + counter);
+        if (tempDir.mkdir()) {
+          return tempDir;
+        }
+      }
+      throw new IllegalStateException(
+          "Failed to create directory within "
+              + TEMP_DIR_ATTEMPTS
+              + " attempts (tried "
+              + baseName
+              + "0 to "
+              + baseName
+              + (TEMP_DIR_ATTEMPTS - 1)
+              + ')');
+    }
+
+    @Override
+    File createTempFile(String prefix) throws IOException {
+      return File.createTempFile(
+          /* prefix= */ prefix,
+          /* suffix= */ null,
+          /* directory= */ null /* defaults to java.io.tmpdir */);
+    }
+
+    /** Maximum loop count when creating temp directories. */
+    private static final int TEMP_DIR_ATTEMPTS = 10000;
+  }
+
+  private static final class ThrowingCreator extends TempFileCreator {
+    private static final String MESSAGE =
+        "Guava cannot securely create temporary files or directories under SDK versions before"
+            + " Jelly Bean. You can create one yourself, either in the insecure default directory"
+            + " or in a more secure directory, such as context.getCacheDir(). For more information,"
+            + " see the Javadoc for Files.createTempDir().";
+
+    @Override
+    File createTempDir() {
+      throw new IllegalStateException(MESSAGE);
+    }
+
+    @Override
+    File createTempFile(String prefix) throws IOException {
+      throw new IOException(MESSAGE);
+    }
+  }
+
+  private TempFileCreator() {}
+}
diff --git a/pom.xml b/pom.xml
index 737f182..f653afe 100644
--- a/pom.xml
+++ b/pom.xml
@@ -132,6 +132,7 @@
           <artifactId>animal-sniffer-maven-plugin</artifactId>
           <version>${animal.sniffer.version}</version>
           <configuration>
+            <annotations>com.google.common.io.IgnoreJRERequirement</annotations>
             <signature>
               <groupId>org.codehaus.mojo.signature</groupId>
               <artifactId>java18</artifactId>
-- 
2.33.8

