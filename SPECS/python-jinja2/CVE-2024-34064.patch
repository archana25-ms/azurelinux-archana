From 5dcbbc98a404f70b4cedc8b3ff92a1859cc4cce5 Mon Sep 17 00:00:00 2001
From: Sudipta Pandit <sudpandit@microsoft.com>
Date: Wed, 22 May 2024 16:44:03 +0530
Subject: [PATCH] Backport upstream change for CVE-2024-34064

Backported from https://github.com/pallets/jinja/commit/0668239dc6b44ef38e7a6c9f91f312fd4ca581cb
based on existing patch for CVE-2024-22195

Original patch:
From d655030770081e2dfe46f90e27620472a502289d Mon Sep 17 00:00:00 2001
From: David Lord <davidism@gmail.com>
Date: Thu, 2 May 2024 09:14:00 -0700
Subject: [PATCH] disallow invalid characters in keys to xmlattr filter
---
 src/jinja2/filters.py | 22 +++++++++++++++++-----
 tests/test_filters.py | 11 ++++++-----
 2 files changed, 23 insertions(+), 10 deletions(-)

diff --git a/src/jinja2/filters.py b/src/jinja2/filters.py
index 4f90bfe..28199e1 100644
--- a/src/jinja2/filters.py
+++ b/src/jinja2/filters.py
@@ -271,7 +271,9 @@ def do_lower(s: str) -> str:
     return soft_str(s).lower()
 
 
-_space_re = re.compile(r"\s", flags=re.ASCII)
+# Check for characters that would move the parser state from key to value.
+# https://html.spec.whatwg.org/#attribute-name-state
+_attr_key_re = re.compile(r"[\s/>=]", flags=re.ASCII)
 
 
 @pass_eval_context
@@ -282,8 +284,14 @@ def do_xmlattr(
     All values that are neither `none` nor `undefined` are automatically
     escaped:
 
-    If any key contains a space, this fails with a ``ValueError``. Values that
-    are neither ``none`` nor ``undefined`` are automatically escaped.
+    **Values** that are neither ``none`` nor ``undefined`` are automatically
+    escaped, safely allowing untrusted user input.
+
+    User input should not be used as **keys** to this filter. If any key
+    contains a space, ``/`` solidus, ``>`` greater-than sign, or ``=`` equals
+    sign, this fails with a ``ValueError``. Regardless of this, user input
+    should never be used as keys to this filter, or must be separately validated
+    first.
 
     .. sourcecode:: html+jinja
 
@@ -303,6 +311,10 @@ def do_xmlattr(
     As you can see it automatically prepends a space in front of the item
     if the filter returned something unless the second parameter is false.
 
+    .. versionchanged:: 3.1.4
+    Keys with ``/`` solidus, ``>`` greater-than sign, or ``=`` equals sign
+    are not allowed.
+
     .. versionchanged:: 3.1.3
         Keys with spaces are not allowed. (patched for 3.0.3)
     """
@@ -312,8 +324,8 @@ def do_xmlattr(
         if value is None or isinstance(value, Undefined):
             continue
 
-        if _space_re.search(key) is not None:
-            raise ValueError(f"Spaces are not allowed in attributes: '{key}'")
+        if _attr_key_re.search(key) is not None:
+            raise ValueError(f"Invalid character in attribute name: {key!r}")
 
         items.append(f'{escape(key)}="{escape(value)}"')
 
diff --git a/tests/test_filters.py b/tests/test_filters.py
index 45843fd..6533370 100644
--- a/tests/test_filters.py
+++ b/tests/test_filters.py
@@ -463,11 +463,12 @@ class TestFilter:
         assert 'bar="23"' in out
         assert 'blub:blub="&lt;?&gt;"' in out
 
-    def test_xmlattr_key_with_spaces(self, env):
-        with pytest.raises(ValueError, match="Spaces are not allowed"):
-            env.from_string(
-                "{{ {'src=1 onerror=alert(1)': 'my_class'}|xmlattr }}"
-            ).render()
+    @pytest.mark.parametrize("sep", ("\t", "\n", "\f", " ", "/", ">", "="))
+    def test_xmlattr_key_invalid(self, env: Environment, sep: str) -> None:
+        with pytest.raises(ValueError, match="Invalid character"):
+            env.from_string("{{ {key: 'my_class'}|xmlattr }}").render(
+                key=f"class{sep}onclick=alert(1)"
+            )
 
     def test_sort1(self, env):
         tmpl = env.from_string("{{ [2, 3, 1]|sort }}|{{ [2, 3, 1]|sort(true) }}")
-- 
2.34.1

